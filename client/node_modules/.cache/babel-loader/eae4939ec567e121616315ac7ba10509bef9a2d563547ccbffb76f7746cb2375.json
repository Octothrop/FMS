{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u6700\\u7D42\\u5E74\\u5EA6\\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\\\client\\\\src\\\\ml-model\\\\SoilInputForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SoilInputForm({\n  onPredict\n}) {\n  _s();\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!file) {\n      setError('Please upload a PDF file.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    setLoading(true);\n    setError('');\n    try {\n      console.log(form);\n      const response = await fetch('http://localhost:5050/predict', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        throw new Error(`Error: ${response.status} ${errorMessage}`);\n      }\n      const data = await response.json();\n      onPredict(data.predicted_crop);\n    } catch (error) {\n      console.error('Error:', error);\n      setError(`An error occurred while predicting the crop: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"application/pdf\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: loading,\n      children: loading ? 'Predicting...' : 'Predict Crop'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(SoilInputForm, \"zemLLjpIXaK1pN1ujLb0pGj6wXM=\");\n_c = SoilInputForm;\nvar _c;\n$RefreshReg$(_c, \"SoilInputForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SoilInputForm","onPredict","_s","file","setFile","error","setError","loading","setLoading","handleFileChange","event","target","files","handleSubmit","preventDefault","formData","FormData","append","console","log","form","response","fetch","method","body","ok","errorMessage","text","Error","status","data","json","predicted_crop","message","onSubmit","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","disabled","style","color","_c","$RefreshReg$"],"sources":["D:/最終年度プロジェクト/client/src/ml-model/SoilInputForm.js"],"sourcesContent":["import React, { useState } from 'react';\n\nexport default function SoilInputForm({ onPredict }) {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!file) {\n      setError('Please upload a PDF file.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    setLoading(true);\n    setError('');\n\n    try {\n      console.log(form)\n      const response = await fetch('http://localhost:5050/predict', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        throw new Error(`Error: ${response.status} ${errorMessage}`);\n      }\n\n      const data = await response.json();\n      onPredict(data.predicted_crop);\n    } catch (error) {\n      console.error('Error:', error);\n      setError(`An error occurred while predicting the crop: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"file\" accept=\"application/pdf\" onChange={handleFileChange} />\n      <button type=\"submit\" disabled={loading}>\n        {loading ? 'Predicting...' : 'Predict Crop'}\n      </button>\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n    </form>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACnD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMY,gBAAgB,GAAIC,KAAK,IAAK;IAClCN,OAAO,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,KAAK,IAAK;IACpCA,KAAK,CAACI,cAAc,CAAC,CAAC;IAEtB,IAAI,CAACX,IAAI,EAAE;MACTG,QAAQ,CAAC,2BAA2B,CAAC;MACrC;IACF;IAEA,MAAMS,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEd,IAAI,CAAC;IAE7BK,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACFY,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;MACjB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAET;MACR,CAAC,CAAC;MAEF,IAAI,CAACM,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAMC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAC1C,MAAM,IAAIC,KAAK,CAAC,UAAUP,QAAQ,CAACQ,MAAM,IAAIH,YAAY,EAAE,CAAC;MAC9D;MAEA,MAAMI,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC9B,SAAS,CAAC6B,IAAI,CAACE,cAAc,CAAC;IAChC,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACda,OAAO,CAACb,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BC,QAAQ,CAAC,gDAAgDD,KAAK,CAAC4B,OAAO,EAAE,CAAC;IAC3E,CAAC,SAAS;MACRzB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACET,OAAA;IAAMmC,QAAQ,EAAErB,YAAa;IAAAsB,QAAA,gBAC3BpC,OAAA;MAAOqC,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,iBAAiB;MAACC,QAAQ,EAAE7B;IAAiB;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1E3C,OAAA;MAAQqC,IAAI,EAAC,QAAQ;MAACO,QAAQ,EAAEpC,OAAQ;MAAA4B,QAAA,EACrC5B,OAAO,GAAG,eAAe,GAAG;IAAc;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EACRrC,KAAK,iBAAIN,OAAA;MAAK6C,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAV,QAAA,EAAE9B;IAAK;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEX;AAACxC,EAAA,CAtDuBF,aAAa;AAAA8C,EAAA,GAAb9C,aAAa;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}