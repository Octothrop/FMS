{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u6700\\u7D42\\u5E74\\u5EA6\\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\\\client\\\\src\\\\ml-model\\\\SoilInputForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SoilInputForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SoilInputForm({\n  onPredict\n}) {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [predictions, setPredictions] = useState([]);\n  const handleFileChange = event => {\n    const newFiles = Array.from(event.target.files);\n    setFiles(prevFiles => [...prevFiles, ...newFiles]);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (files.length === 0) {\n      alert('Please upload at least one PDF file.');\n      return;\n    }\n    const promises = files.map(async file => {\n      const formData = new FormData();\n      formData.append('file', file);\n      try {\n        const response = await fetch('http://127.0.0.1:5000/predict', {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch prediction');\n        }\n        const data = await response.json();\n        return data.predicted_crop;\n      } catch (error) {\n        console.error('Error:', error);\n        alert('An error occurred while predicting the crop. Please try again.');\n        return null;\n      }\n    });\n    const results = await Promise.all(promises);\n    setPredictions(prevPredictions => [...prevPredictions, ...results.filter(result => result !== null)]);\n    setFiles([]); // Clear files after submission\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"soil-input-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        multiple: true,\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Predict Crop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploaded-files\",\n      children: files.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predictions\",\n      children: predictions.map((prediction, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prediction\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Prediction:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), \" \", prediction]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(SoilInputForm, \"c2kZj9iemakPYWIpL5yVo8UZXcc=\");\n_c = SoilInputForm;\nvar _c;\n$RefreshReg$(_c, \"SoilInputForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SoilInputForm","onPredict","_s","files","setFiles","predictions","setPredictions","handleFileChange","event","newFiles","Array","from","target","prevFiles","handleSubmit","preventDefault","length","alert","promises","map","file","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","predicted_crop","error","console","results","Promise","all","prevPredictions","filter","result","className","children","onSubmit","type","accept","multiple","onChange","fileName","_jsxFileName","lineNumber","columnNumber","index","name","prediction","_c","$RefreshReg$"],"sources":["D:/最終年度プロジェクト/client/src/ml-model/SoilInputForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SoilInputForm.css';\n\nexport default function SoilInputForm({ onPredict }) {\n  const [files, setFiles] = useState([]);\n  const [predictions, setPredictions] = useState([]);\n\n  const handleFileChange = (event) => {\n    const newFiles = Array.from(event.target.files);\n    setFiles((prevFiles) => [...prevFiles, ...newFiles]);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (files.length === 0) {\n      alert('Please upload at least one PDF file.');\n      return;\n    }\n\n    const promises = files.map(async (file) => {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      try {\n        const response = await fetch('http://127.0.0.1:5000/predict', {\n          method: 'POST',\n          body: formData,\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch prediction');\n        }\n\n        const data = await response.json();\n        return data.predicted_crop;\n      } catch (error) {\n        console.error('Error:', error);\n        alert('An error occurred while predicting the crop. Please try again.');\n        return null;\n      }\n    });\n\n    const results = await Promise.all(promises);\n    setPredictions((prevPredictions) => [\n      ...prevPredictions,\n      ...results.filter((result) => result !== null),\n    ]);\n    setFiles([]); // Clear files after submission\n  };\n\n  return (\n    <div className=\"soil-input-form\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"file\"\n          accept=\"application/pdf\"\n          multiple\n          onChange={handleFileChange}\n        />\n        <button type=\"submit\">Predict Crop</button>\n      </form>\n      <div className=\"uploaded-files\">\n        {files.map((file, index) => (\n          <div className=\"file\" key={index}>\n            <span>{file.name}</span>\n          </div>\n        ))}\n      </div>\n      <div className=\"predictions\">\n        {predictions.map((prediction, index) => (\n          <div className=\"prediction\" key={index}>\n            <strong>Prediction:</strong> {prediction}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACnD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMU,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,CAACT,KAAK,CAAC;IAC/CC,QAAQ,CAAES,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAE,GAAGJ,QAAQ,CAAC,CAAC;EACtD,CAAC;EAED,MAAMK,YAAY,GAAG,MAAON,KAAK,IAAK;IACpCA,KAAK,CAACO,cAAc,CAAC,CAAC;IAEtB,IAAIZ,KAAK,CAACa,MAAM,KAAK,CAAC,EAAE;MACtBC,KAAK,CAAC,sCAAsC,CAAC;MAC7C;IACF;IAEA,MAAMC,QAAQ,GAAGf,KAAK,CAACgB,GAAG,CAAC,MAAOC,IAAI,IAAK;MACzC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;MAE7B,IAAI;QACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;UAC5DC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClC,OAAOD,IAAI,CAACE,cAAc;MAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BhB,KAAK,CAAC,gEAAgE,CAAC;QACvE,OAAO,IAAI;MACb;IACF,CAAC,CAAC;IAEF,MAAMkB,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACnB,QAAQ,CAAC;IAC3CZ,cAAc,CAAEgC,eAAe,IAAK,CAClC,GAAGA,eAAe,EAClB,GAAGH,OAAO,CAACI,MAAM,CAAEC,MAAM,IAAKA,MAAM,KAAK,IAAI,CAAC,CAC/C,CAAC;IACFpC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChB,CAAC;EAED,oBACEL,OAAA;IAAK0C,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B3C,OAAA;MAAM4C,QAAQ,EAAE7B,YAAa;MAAA4B,QAAA,gBAC3B3C,OAAA;QACE6C,IAAI,EAAC,MAAM;QACXC,MAAM,EAAC,iBAAiB;QACxBC,QAAQ;QACRC,QAAQ,EAAExC;MAAiB;QAAAyC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eACFpD,OAAA;QAAQ6C,IAAI,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAY;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,eACPpD,OAAA;MAAK0C,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC5BvC,KAAK,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEgC,KAAK,kBACrBrD,OAAA;QAAK0C,SAAS,EAAC,MAAM;QAAAC,QAAA,eACnB3C,OAAA;UAAA2C,QAAA,EAAOtB,IAAI,CAACiC;QAAI;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC,GADCC,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE3B,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNpD,OAAA;MAAK0C,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzBrC,WAAW,CAACc,GAAG,CAAC,CAACmC,UAAU,EAAEF,KAAK,kBACjCrD,OAAA;QAAK0C,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzB3C,OAAA;UAAA2C,QAAA,EAAQ;QAAW;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACG,UAAU;MAAA,GADTF,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjC,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjD,EAAA,CA3EuBF,aAAa;AAAAuD,EAAA,GAAbvD,aAAa;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}