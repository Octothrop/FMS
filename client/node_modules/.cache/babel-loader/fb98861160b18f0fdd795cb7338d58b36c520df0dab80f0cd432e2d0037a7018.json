{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u6700\\u7D42\\u5E74\\u5EA6\\u30D7\\u30ED\\u30B8\\u30A7\\u30AF\\u30C8\\\\client\\\\src\\\\market\\\\buy-crops.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Header from \"../header-footer/header\";\nimport Footer from \"../header-footer/footer\";\nimport \"./buy-crops.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst haversineDistance = (coords1, coords2) => {\n  const toRad = value => value * Math.PI / 180;\n  const R = 6371;\n  const dLat = toRad(coords2.latitude - coords1.latitude);\n  const dLon = toRad(coords2.longitude - coords1.longitude);\n  const lat1 = toRad(coords1.latitude);\n  const lat2 = toRad(coords2.latitude);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\nexport default function BuyCrops() {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const {\n    userId,\n    orderId,\n    pay,\n    transactionId\n  } = useParams();\n  const navigate = useNavigate();\n  let cropsOnSale = [];\n  let userLocation = null;\n  let maxDistance = Infinity;\n\n  // Fetch crops and user location\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(async position => {\n      userLocation = {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      };\n\n      // Fetch crops\n      try {\n        const response = await fetch(\"http://localhost:5001/api/commerce/getAllCropsOnSale\");\n        cropsOnSale = await response.json();\n        handleFilteringAndPayment(userLocation, cropsOnSale);\n      } catch (error) {\n        console.error(\"Error fetching crops:\", error);\n      }\n    }, error => {\n      console.error(\"Error fetching user location:\", error);\n    });\n  }, []);\n  const handleFilteringAndPayment = (userLocation, cropsOnSale) => {\n    if (userLocation) {\n      // Filter crops based on distance\n      const filteredCrops = cropsOnSale.filter(crop => {\n        const cropLocation = {\n          latitude: crop.location.coordinates[1],\n          longitude: crop.location.coordinates[0]\n        };\n        const distance = haversineDistance(userLocation, cropLocation);\n        return distance <= maxDistance;\n      });\n\n      // Handle payment status if needed\n      if (orderId && pay && transactionId) {\n        handlePaymentStatus(orderId, pay, transactionId);\n      }\n      renderTable(filteredCrops); // Render the table with filtered crops\n    }\n  };\n  const handlePaymentStatus = async (orderId, pay, transactionId) => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/commerce/updateOrderStatus/${orderId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          pay: pay === \"true\",\n          transactionId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Order status updated:\", data);\n      if (pay === \"true\") {\n        alert(t(\"payment_success\"));\n      } else {\n        alert(t(\"payment_failed\"));\n      }\n      navigate(`/buyCrops/${userId}`);\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n    }\n  };\n  const handleBuy = async cropId => {\n    const confirmation = window.confirm(t(\"confirm_buy\"));\n    if (!confirmation) return;\n    const qty = window.prompt(t(\"enter_quantity\"));\n    if (qty === null) return;\n    const quantity = parseInt(qty, 10);\n    if (isNaN(quantity) || quantity <= 0) {\n      alert(t(\"invalid_quantity\"));\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:5001/api/commerce/buyCrop/${userId}/${cropId}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          quantity\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const {\n        paymentUrl\n      } = await response.json();\n      window.location.href = paymentUrl;\n    } catch (error) {\n      console.error(\"There was a problem with the fetch operation:\", error);\n    }\n  };\n  const renderTable = filteredCrops => {\n    const tableBody = filteredCrops.map(crop => {\n      const cropLocation = {\n        latitude: crop.location.coordinates[1],\n        longitude: crop.location.coordinates[0]\n      };\n      const distance = userLocation && cropLocation ? haversineDistance(userLocation, cropLocation).toFixed(2) : \"N/A\";\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: t(crop.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: t(crop.variety)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: new Date(crop.harvestDate).toLocaleDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: crop.quantity - crop.soldQty\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: crop.pricePerUnit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [distance, \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleBuy(crop._id),\n            children: t(\"table.buy\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, crop._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: t(\"table.name\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: t(\"table.variety\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: t(\"table.harvestDate\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: t(\"table.quantity\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: t(\"table.pricePerUnit\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: t(\"table.distance\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: t(\"table.actions\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"buy-crops-main\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buy-crops\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          onChange: e => {\n            maxDistance = e.target.value === \"\" ? Infinity : e.target.value;\n            handleFilteringAndPayment(userLocation, cropsOnSale);\n          },\n          placeholder: \"Enter distance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleFilteringAndPayment(userLocation, cropsOnSale),\n          children: t(\"filter\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), renderTable([]), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n_s(BuyCrops, \"X3DHSd5onakMaVeIe7Q2M+n9wBY=\", false, function () {\n  return [useTranslation, useParams, useNavigate];\n});\n_c = BuyCrops;\nvar _c;\n$RefreshReg$(_c, \"BuyCrops\");","map":{"version":3,"names":["React","useEffect","useTranslation","useParams","useNavigate","Header","Footer","jsxDEV","_jsxDEV","haversineDistance","coords1","coords2","toRad","value","Math","PI","R","dLat","latitude","dLon","longitude","lat1","lat2","a","sin","cos","c","atan2","sqrt","BuyCrops","_s","t","userId","orderId","pay","transactionId","navigate","cropsOnSale","userLocation","maxDistance","Infinity","navigator","geolocation","getCurrentPosition","position","coords","response","fetch","json","handleFilteringAndPayment","error","console","filteredCrops","filter","crop","cropLocation","location","coordinates","distance","handlePaymentStatus","renderTable","method","headers","body","JSON","stringify","ok","Error","status","data","log","alert","handleBuy","cropId","confirmation","window","confirm","qty","prompt","quantity","parseInt","isNaN","paymentUrl","href","tableBody","map","toFixed","children","name","fileName","_jsxFileName","lineNumber","columnNumber","variety","Date","harvestDate","toLocaleDateString","soldQty","pricePerUnit","onClick","_id","className","type","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["D:/最終年度プロジェクト/client/src/market/buy-crops.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Header from \"../header-footer/header\";\r\nimport Footer from \"../header-footer/footer\";\r\nimport \"./buy-crops.css\";\r\n\r\nconst haversineDistance = (coords1, coords2) => {\r\n  const toRad = (value) => (value * Math.PI) / 180;\r\n  const R = 6371;\r\n\r\n  const dLat = toRad(coords2.latitude - coords1.latitude);\r\n  const dLon = toRad(coords2.longitude - coords1.longitude);\r\n  const lat1 = toRad(coords1.latitude);\r\n  const lat2 = toRad(coords2.latitude);\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  return R * c;\r\n};\r\n\r\nexport default function BuyCrops() {\r\n  const { t } = useTranslation();\r\n  const { userId, orderId, pay, transactionId } = useParams();\r\n  const navigate = useNavigate();\r\n  let cropsOnSale = [];\r\n  let userLocation = null;\r\n  let maxDistance = Infinity;\r\n\r\n  // Fetch crops and user location\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (position) => {\r\n        userLocation = {\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n        };\r\n\r\n        // Fetch crops\r\n        try {\r\n          const response = await fetch(\"http://localhost:5001/api/commerce/getAllCropsOnSale\");\r\n          cropsOnSale = await response.json();\r\n          handleFilteringAndPayment(userLocation, cropsOnSale);\r\n        } catch (error) {\r\n          console.error(\"Error fetching crops:\", error);\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error(\"Error fetching user location:\", error);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const handleFilteringAndPayment = (userLocation, cropsOnSale) => {\r\n    if (userLocation) {\r\n      // Filter crops based on distance\r\n      const filteredCrops = cropsOnSale.filter((crop) => {\r\n        const cropLocation = {\r\n          latitude: crop.location.coordinates[1],\r\n          longitude: crop.location.coordinates[0],\r\n        };\r\n        const distance = haversineDistance(userLocation, cropLocation);\r\n        return distance <= maxDistance;\r\n      });\r\n\r\n      // Handle payment status if needed\r\n      if (orderId && pay && transactionId) {\r\n        handlePaymentStatus(orderId, pay, transactionId);\r\n      }\r\n\r\n      renderTable(filteredCrops); // Render the table with filtered crops\r\n    }\r\n  };\r\n\r\n  const handlePaymentStatus = async (orderId, pay, transactionId) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5001/api/commerce/updateOrderStatus/${orderId}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ pay: pay === \"true\", transactionId }),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"Order status updated:\", data);\r\n\r\n      if (pay === \"true\") {\r\n        alert(t(\"payment_success\"));\r\n      } else {\r\n        alert(t(\"payment_failed\"));\r\n      }\r\n\r\n      navigate(`/buyCrops/${userId}`);\r\n    } catch (error) {\r\n      console.error(\"Error updating order status:\", error);\r\n    }\r\n  };\r\n\r\n  const handleBuy = async (cropId) => {\r\n    const confirmation = window.confirm(t(\"confirm_buy\"));\r\n    if (!confirmation) return;\r\n\r\n    const qty = window.prompt(t(\"enter_quantity\"));\r\n    if (qty === null) return;\r\n    const quantity = parseInt(qty, 10);\r\n\r\n    if (isNaN(quantity) || quantity <= 0) {\r\n      alert(t(\"invalid_quantity\"));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5001/api/commerce/buyCrop/${userId}/${cropId}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ quantity }),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const { paymentUrl } = await response.json();\r\n      window.location.href = paymentUrl;\r\n    } catch (error) {\r\n      console.error(\"There was a problem with the fetch operation:\", error);\r\n    }\r\n  };\r\n\r\n  const renderTable = (filteredCrops) => {\r\n    const tableBody = filteredCrops.map((crop) => {\r\n      const cropLocation = {\r\n        latitude: crop.location.coordinates[1],\r\n        longitude: crop.location.coordinates[0],\r\n      };\r\n      const distance = userLocation && cropLocation\r\n        ? haversineDistance(userLocation, cropLocation).toFixed(2)\r\n        : \"N/A\";\r\n\r\n      return (\r\n        <tr key={crop._id}>\r\n          <td>{t(crop.name)}</td>\r\n          <td>{t(crop.variety)}</td>\r\n          <td>{new Date(crop.harvestDate).toLocaleDateString()}</td>\r\n          <td>{crop.quantity - crop.soldQty}</td>\r\n          <td>{crop.pricePerUnit}</td>\r\n          <td>{distance} km</td>\r\n          <td>\r\n            <button onClick={() => handleBuy(crop._id)}>\r\n              {t(\"table.buy\")}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>{t(\"table.name\")}</th>\r\n            <th>{t(\"table.variety\")}</th>\r\n            <th>{t(\"table.harvestDate\")}</th>\r\n            <th>{t(\"table.quantity\")}</th>\r\n            <th>{t(\"table.pricePerUnit\")}</th>\r\n            <th>{t(\"table.distance\")}</th>\r\n            <th>{t(\"table.actions\")}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{tableBody}</tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"buy-crops-main\">\r\n      <Header />\r\n      <div className=\"buy-crops\">\r\n        {/* Filter section can be added here */}\r\n        <div className=\"filter-section\">\r\n          <input\r\n            type=\"number\"\r\n            onChange={(e) => {\r\n              maxDistance = e.target.value === \"\" ? Infinity : e.target.value;\r\n              handleFilteringAndPayment(userLocation, cropsOnSale);\r\n            }}\r\n            placeholder=\"Enter distance\"\r\n          />\r\n          <button onClick={() => handleFilteringAndPayment(userLocation, cropsOnSale)}>\r\n            {t(\"filter\")}\r\n          </button>\r\n        </div>\r\n        {renderTable([])} {/* Render empty table initially */}\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}